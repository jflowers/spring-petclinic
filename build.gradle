plugins {
  id 'java'
  id 'jacoco'
  id 'org.sonarqube' version '2.8'
  id 'maven-publish'
  id 'io.spring.dependency-management' version '1.0.6.RELEASE'
  id 'org.springframework.boot' version '2.1.0.RELEASE'
}

dependencyManagement {
  imports {
    mavenBom 'me.snowdrop:spring-boot-bom:2.1.12.Final-redhat-00001'
  }
}

group = 'org.springframework.samples'

def crwWebAppUrl = System.getenv('WEB_APP_URL')
if (crwWebAppUrl){
  project.setProperty('test.target.server.url', crwWebAppUrl)
}

bootJar {
  archiveBaseName = 'spring-petclinic'
  archiveVersion =  project.archiveVersion
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  maven {
    url "${nexusRepoBaseUrl}/repository/maven-all-public/"
  }
}

sourceSets{
  webTest{
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

configurations {
  webTestImplementation.extendsFrom implementation
  webTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-actuator")
  implementation("org.springframework.boot:spring-boot-starter-cache")
  implementation("org.springframework.boot:spring-boot-starter-data-jpa")
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
  
  implementation("org.springframework.boot:spring-boot-starter-data-jpa")
  implementation("org.springframework.boot:spring-boot-starter-data-rest")
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

  implementation("javax.cache:cache-api")
  implementation("org.ehcache:ehcache")
  
  implementation("org.webjars:webjars-locator-core")

  implementation("org.webjars:jquery:2.2.4")
  implementation("org.webjars:jquery-ui:1.11.4")
  implementation("org.webjars:bootstrap:3.3.6")

  runtimeOnly("org.hsqldb:hsqldb")
  runtimeOnly("mysql:mysql-connector-java")

  compileOnly("org.springframework.boot:spring-boot-devtools")
  
  testImplementation("org.springframework.boot:spring-boot-starter-test"){
    exclude group:"org.junit.vintage", module:"junit-vintage-engine"
  }
  testImplementation("pl.pragmatists:JUnitParams:1.0.6")
  testImplementation("org.junit.jupiter:junit-jupiter-engine")
  testImplementation("org.mockito:mockito-junit-jupiter")

  webTestImplementation('junit:junit:4.13')
  webTestImplementation("org.seleniumhq.selenium:selenium-java:3.141.59")
  webTestImplementation("org.seleniumhq.selenium:htmlunit-driver:2.36.0")
}

jacoco {
  toolVersion = "0.8.5"
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled true
  }
}

test {
  useJUnitPlatform()
}

task webTest(type: Test) {
  description = 'Runs selenium web tests.'
  group = 'verification'

  testClassesDirs = sourceSets.webTest.output.classesDirs
  classpath = sourceSets.webTest.runtimeClasspath

  [
    "test.target.server.url",
    "test.selenium.hub.url",
    "test.run.htmlunit",
    "test.run.ie",
    "test.run.firefox",
    "test.run.chrome",
    "test.run.opera"
  ].each{ propertyName ->
    if (project.hasProperty(propertyName)){
      systemProperty(propertyName, project.getProperty(propertyName))
    }
  }
}

publishing {
  publications {
    mavenJava( MavenPublication ) {
      artifact( tasks.bootJar.outputs.files.singleFile ) {
        builtBy tasks.bootJar
      }
    }
  }
  repositories {
    maven {
      url "${nexusRepoBaseUrl}/repository/maven-releases/"
      credentials {
        username nexusUser
        password nexusPassword
      }
    }
  }
}